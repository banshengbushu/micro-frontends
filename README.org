#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+TITLE: Micro Frontends(Slides generated from Martinfowler's post)
#+Email: ydli@thoughtworks.com
#+Date:
#+Author:
#+EXPORT_FILE_NAME: index.html
#+OPTIONS: timestamp:nil, toc:nil, reveal_title_slide:nil, num:nil, reveal_history:true,
#+REVEAL_TRANS: concave
#+REVEAL_EXTRA_CSS: ./style.css
#+REVEAL_HTML: <link href="https://fonts.googleapis.com/css?family=Roboto:100,400,900" rel="stylesheet">

* Micro Frontends
  #+REVEAL_HTML: <img class="amp-logo" src="./banner.jpg">
  [[https://martinfowler.com/articles/micro-frontends.html][Martin Fowler Micro Frontends]]
* What's the problem now
** Monolith project
   - Innovation in legacy code base
   - Huge team working on same product
   - Only refactor part of the page and do the integration
   - Microservice backend but a monolith frontend
** TW Tech Radia
   - Nov 2016, Assess
   - Nov 2017, Trial
   - Apr 2019, Adopt
** Definition
 #+BEGIN_QUOTE
   "An architectural style where independently deliverable frontend applications are composed into a greater whole"
 #+END_QUOTE
* Pros of micro frontends
  - Smaller, more cohesive and maintainable codebases
  - More scalable organisations with decoupled, autonomous teams
  - The ability to upgrade, update, or even rewrite parts of the frontend in a more incremental fashion than was previously possible
** Incremental upgrades
   - Instead of rewrite the whole application
   - Refactor piece by piece
** Simple, decoupled codebases
   - Smaller code base is easy to work with
   - Force to decouple the logic between parts application
   - Sharing domain models across bounded contexts becomes more difficult
** Independent deployment
   #+REVEAL_HTML: <img class="stretch" src="https://martinfowler.com/articles/micro-frontends/deployment.png">
** Independent deployment
   - Each micro frontend should have its own continuous delivery pipeline
   - It shouldn't matter if the old monolith is on a fixed, manual, quarterly release cycle
   - Independent release cycles
** Autonomous teams
   - Teams can have full ownership of everything they need
   - Move quickly and effectively
** Autonomous teams
   #+REVEAL_HTML: <img class="stretch" src="https://martinfowler.com/articles/micro-frontends/horizontal.png">
** In a nutshell
   - Slicing up big and scary things into smaller, more manageable pieces
   - Explicit about the dependencies
   - Release and manage the process people without excessive coordination
* Requirement Example
   #+REVEAL_HTML: <img class="stretch" src="https://martinfowler.com/articles/micro-frontends/wireframe.png">
** Container application
   #+REVEAL_HTML: <img class="stretch" src="https://martinfowler.com/articles/micro-frontends/composition.png">
** Container application
   - Render page level components
   - Manage routing/authentication
   - Manage other micro frontends
* Different Patterns
** Server-side template composition
   #+REVEAL_HTML: <img class="stretch" src="https://martinfowler.com/articles/micro-frontends/ssi.png">
** Server-side template composition
#+BEGIN_SRC html
  <body>
    <h1>Feed me</h1>
    <!--# include file="$PAGE.html" -->
  </body>
#+END_SRC
#+BEGIN_SRC conf
  server {
      listen 8080;
      ...

      location /browse {
        set $PAGE 'browse';
      }
      location /order {
        set $PAGE 'order';
      }
  }
#+END_SRC
** Build-time integration
#+BEGIN_SRC json
  {
    "name": "@feed-me/container",
    "version": "1.0.0",
    "description": "A food delivery web app",
    "dependencies": {
      "@feed-me/browse-restaurants": "^1.2.3",
      "@feed-me/order-food": "^4.5.6",
      "@feed-me/user-profile": "^7.8.9"
    }
  }
#+END_SRC
   - Release together ðŸ˜…
** Run-time integration via iframes
#+BEGIN_SRC html
  <body>
    <h1>Welcome to Feed me!</h1>
    <iframe id="micro-frontend-container"></iframe>
    <script type="text/javascript">
      const microFrontendsByRoute = {
      '/': 'https://browse.example.com/index.html',
      '/order-food': 'https://order.example.com/index.html',
      '/user-profile': 'https://profile.example.com/index.html',
      };

      const iframe = document.getElementById('micro-frontend-container');
      iframe.src = microFrontendsByRoute[window.location.pathname];
    </script>
  </body>
#+END_SRC
** Run-time integration via iframes
   - Difficult to build integrations between different parts
   - Routing, history, and deep-linking more complicated
** Run-time integration via JavaScript
#+BEGIN_SRC html
    <body>
      <h1>Welcome to Feed me!</h1>
      <!-- These scripts don't render anything immediately -->
      <!-- Instead they attach entry-point functions to `window` -->
      <script src="https://browse.example.com/bundle.js"></script>
      <script src="https://order.example.com/bundle.js"></script>
      <script src="https://profile.example.com/bundle.js"></script>
      <div id="micro-frontend-root"></div>
      <script type="text/javascript">
        // These global functions are attached to window by the above scripts
        const microFrontendsByRoute = {
          '/': window.renderBrowseRestaurants,
          '/order-food': window.renderOrderFood,
          '/user-profile': window.renderUserProfile,
        };
        const renderFunction = microFrontendsByRoute[window.location.pathname];

        // Having determined the entry-point function, we now call it,
        // giving it the ID of the element where it should render itself
        renderFunction('micro-frontend-root');
      </script>
    </body>
#+END_SRC
** Run-time integration via JavaScript
   - flexibility of integration
   - can be lazyloaded
   - default choice
** Run-time integration via Web Components
#+BEGIN_SRC html
    <body>
      <h1>Welcome to Feed me!</h1>
      <!-- These scripts don't render anything immediately -->
      <!-- Instead they each define a custom element type -->
      <script src="https://browse.example.com/bundle.js"></script>
      <script src="https://order.example.com/bundle.js"></script>
      <script src="https://profile.example.com/bundle.js"></script>
      <div id="micro-frontend-root"></div>
      <script type="text/javascript">
        // These element types are defined by the above scripts
        const webComponentsByRoute = {
          '/': 'micro-frontend-browse-restaurants',
          '/order-food': 'micro-frontend-order-food',
          '/user-profile': 'micro-frontend-user-profile',
        };
        const webComponentType = webComponentsByRoute[window.location.pathname];

        // Having determined the right web component custom element type,
        // we now create an instance of it and attach it to the document
        const root = document.getElementById('micro-frontend-root');
        const webComponent = document.createElement(webComponentType);
        root.appendChild(webComponent);
      </script>
    </body>
#+END_SRC
** Run-time integration via Web Components
   - The web component way
   - Browser compatibility(IE??)
* CSS
  - global, inheriting, and cascading
  - no module system, namespacing or encapsulation
** How to avoid
   - BEM
   - SASS with nested namespace
   - CSS Modules
   - Shadow DOM
   - CSS in JS
* Free Lunch?
#+BEGIN_QUOTE
There are no free lunches when it comes to software architecture - everything comes with a cost.
#+END_QUOTE
* Q&A
* Thanks
